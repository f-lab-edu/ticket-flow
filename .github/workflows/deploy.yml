name: CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일응 불러온다.
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
            distribution: temurin
            java-version: 17

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t ticket-flow .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag ticket-flow ${{ steps.login-ecr.outputs.registry }}/ticket-flow:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/ticket-flow:latest

      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz appspec.yml scripts

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://ticket-flow/$GITHUB_SHA.tar.gz

      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
        run: aws deploy create-deployment
          --application-name ticket-flow-server
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name Production
          --s3-location bucket=ticket-flow,bundleType=tgz,key=$GITHUB_SHA.tar.gz

#      - name: SSH로 EC2에 접속한다.
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          port: 22
#          script_stop: true
#          script: |
#              docker stop ticket-flow || true
#              docker rm ticket-flow || true
#              docker pull ${{ steps.login-ecr.outputs.registry }}/ticket-flow:latest
#              docker run -d --name ticket-flow -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/ticket-flow:latest
#      - name: 빌드된 파일 이름 변경하기
#        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
#
#      - name: 압축하기
#        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts
#
#      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#            aws-region: ap-northeast-2
#            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: S3에 프로젝트 폴더 업로드하기
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://ticket-flow/$GITHUB_SHA.tar.gz
#
#      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
#        run: aws deploy create-deployment
#            --application-name ticket-flow-server
#            --deployment-config-name CodeDeployDefault.AllAtOnce
#            --deployment-group-name Production
#            --s3-location bucket=ticket-flow,bundleType=tgz,key=$GITHUB_SHA.tar.gz

#      - name: SCP로 EC2에 빌드된 파일 전송하기
#        uses: appleboy/scp-action@v0.1.7
#        with:
#            host: ${{ secrets.EC2_HOST }}
#            username: ${{ secrets.EC2_USERNAME }}
#            key: ${{ secrets.EC2_PRIVATE_KEY }}
#            source: project.jar
#            target: /home/ubuntu/ticket-flow/tobe
#
#      - name: SSH로 EC2에 접속한다.
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            rm -rf /home/ubuntu/ticket-flow/current
#            mkdir /home/ubuntu/ticket-flow/current
#            mv /home/ubuntu/ticket-flow/tobe/project.jar /home/ubuntu/ticket-flow/current/project.jar
#            cd /home/ubuntu/ticket-flow/current
#            sudo fuser -k -n tcp 8080 || true
#            nohup java -jar project.jar > ./output.log 2>&1 &
#            rm -rf /home/ubuntu/ticket-flow/tobe

